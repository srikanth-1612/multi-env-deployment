name: Manage and List Repos Environments

on:
  workflow_dispatch:

jobs:
  manage-environments:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install axios

    - name: Manage Environments
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        ORG: 'Rcx-chinna'  # organization name
        REPO: 'multi-environment-deployment'  # repository name
      run: |
        node -e "
        const axios = require('axios');
        const token = process.env.GITHUB_TOKEN;
        const org = process.env.ORG;
        const repo = process.env.REPO;
        const headers = {
          'Authorization': \`Bearer \${token}\`,
          'Accept': 'application/vnd.github.v3+json'
        };
        
        const environments = ['dev', 'test', 'prod'];
        const environmentVariables = {
          'dev': { 'VAR1': 'value1', 'VAR2': 'value2' },
          'test': { 'VAR3': 'value3', 'VAR4': 'value4' },
          'prod': { 'VAR5': 'value5', 'VAR6': 'value6' }
        };

        async function createEnvironment(environment) {
          try {
            await axios.post(
              \`https://api.github.com/repos/\${org}/\${repo}/environments/\${environment}\`,
              {},
              { headers }
            );
            console.log(\`Environment \${environment} created in repo \${repo}\`);
          } catch (error) {
            console.error(\`Failed to create environment \${environment} in repo \${repo}\`, error.response.status, error.response.data);
          }
        }

        async function setEnvironmentVariables(environment, variables) {
          for (const [key, value] of Object.entries(variables)) {
            try {
              await axios.put(
                \`https://api.github.com/repos/\${org}/\${repo}/actions/secrets/\${key}\`,
                { encrypted_value: value },
                { headers }
              );
              console.log(\`Variable \${key} set in environment \${environment} of repo \${repo}\`);
            } catch (error) {
              console.error(\`Failed to set variable \${key} in environment \${environment} of repo \${repo}\`, error.response.status, error.response.data);
            }
          }
        }

        async function manageEnvironments() {
          try {
            const environmentsResponse = await axios.get(\`https://api.github.com/repos/\${org}/\${repo}/environments\`, { headers });
            const repoEnvironments = environmentsResponse.data.environments;

            for (const environment of environments) {
              const envExists = repoEnvironments.some(env => env.name.toLowerCase() === environment.toLowerCase());
              if (!envExists) {
                await createEnvironment(environment);
              }
              await setEnvironmentVariables(environment, environmentVariables[environment]);
            }
          } catch (error) {
            console.error('Failed to list environments', error.response.status, error.response.data);
          }
        }

        manageEnvironments();
        "

    - name: List Repositories, Environments, and Variables
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        ORG: 'Rcx-chinna'  # organization name
        REPO: 'multi-environment-deployment'  # repository name
      run: |
        node -e "
        const axios = require('axios');
        const token = process.env.GITHUB_TOKEN;
        const org = process.env.ORG;
        const repo = process.env.REPO;
        const headers = {
          'Authorization': \`Bearer \${token}\`,
          'Accept': 'application/vnd.github.v3+json'
        };

        async function listEnvironments() {
          try {
            const environmentsResponse = await axios.get(\`https://api.github.com/repos/\${org}/\${repo}/environments\`, { headers });
            const repoEnvironments = environmentsResponse.data.environments;

            console.log(\`Repository: \${repo}\`);
            for (const env of repoEnvironments) {
              console.log(\`  Environment: \${env.name}\`);
              // Listing environment variables is not directly supported by GitHub API for security reasons.
              // You would typically manage these via GitHub Secrets, here we print a placeholder.
              console.log(\`    Variables: (not retrievable via API)\`);
            }
          } catch (error) {
            console.error('Failed to list environments', error.response.status, error.response.data);
          }
        }

        listEnvironments();
        "
